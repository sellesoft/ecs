/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { exec } = require("child_process");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand(
      {
        id: "p4-checkout",
        name: "P4 Checkout",
        callback: () => {
          this.execP4Command("edit");
        }
      }
    );
    this.addCommand(
      {
        id: "p4-add",
        name: "P4 Add",
        callback: () => {
          this.execP4Command("add");
        }
      }
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Executes a p4 command on the current file.
  async execP4Command(cmd) {
    var _a;
    const adapter = this.app.vault.adapter;
    if (!(adapter instanceof import_obsidian.FileSystemAdapter))
      return;
    const cwd = adapter.getBasePath();
    const env = process.env;
    const file = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file;
    if (file == null) {
      new import_obsidian.Notice("No file to checkout");
      return;
    }
    exec(
      `p4 ${cmd} ${file.path}`,
      {
        cwd,
        env
      },
      (err, stdout, stderr) => {
        if (err) {
          new import_obsidian.Notice(`p4 ${cmd} ${file} failed:
${err}`);
          return;
        }
        new import_obsidian.Notice(`p4 ${cmd} ${file}
${stdout}`);
      }
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IFxueyBcblx0QXBwLCBcblx0RWRpdG9yLCBcblx0TWFya2Rvd25WaWV3LCBcblx0TW9kYWwsIFxuXHROb3RpY2UsIFxuXHRQbHVnaW4sIFxuXHRQbHVnaW5TZXR0aW5nVGFiLCBcblx0U2V0dGluZywgXG4gICAgRmlsZVN5c3RlbUFkYXB0ZXIsXG59IGZyb20gJ29ic2lkaWFuJztcblxuY29uc3QgeyBleGVjIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmludGVyZmFjZSBNeVBsdWdpblNldHRpbmdzIFxue1xuXHRteVNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTXlQbHVnaW5TZXR0aW5ncyA9IFxue1xuXHRteVNldHRpbmc6ICdkZWZhdWx0J1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVBsdWdpbiBleHRlbmRzIFBsdWdpbiBcbntcblx0c2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkgXG5cdHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0Ly8gVE9ETyhzdXNoaSkgaXQgd291bGQgYmUgbmljZSB0byBhdXRvbWF0aWNhbGx5IGNoZWNrb3V0IGZpbGVzIFxuXHRcdC8vICAgICAgICAgICAgIHdoZW4gT2JzaWRpYW4gdHJpZXMgdG8gd3JpdGUgaXQgdG8gZGlzaywgYnV0IGF0bSB0aGVpclxuXHRcdC8vICAgICAgICAgICAgIGFwaSBvbmx5IHByb3ZpZGVzIG9uKCdtb2RpZnknKSwgd2hpY2ggaXMgY2FsbGVkIG9uY2UgXG5cdFx0Ly8gICAgICAgICAgICAgdGhlIGZpbGUgaXMgYWN0dWFsbHkgd3JpdHRlbi4gU28gd2UgbmV2ZXIgZ2V0IG5vdGlmaWVkIFxuXHRcdC8vICAgICAgICAgICAgIG9mIHRoaXMgc2luY2UgaXQgZXJyb3JzIG91dCBkdWUgdG8gdGhlbSBiZWluZyByZWFkLW9ubHkuXG5cdFx0Ly9cblx0XHQvLyAgICAgICAgICAgICBTaG91bGQgbWFrZSBhIGZvcnVtIHBvc3QgYWJvdXQgdGhpcyBhdCBzb21lIHBvaW50LlxuXG5cdFx0Ly8gVE9ETyhzdXNoaSkgbWF5YmUgc29tZXRpbWUgYWRkIGEgc3RhdHVzIGZvciB0aGUgc3RhdGUgb2YgdGhlIGZpbGUgXG5cdFx0Ly8gICAgICAgICAgICAgdW5kZXIgcDQuXG5cdFx0Ly9cblx0XHQvLyBUaGlzIGFkZHMgYSBzdGF0dXMgYmFyIGl0ZW0gdG8gdGhlIGJvdHRvbSBvZiB0aGUgYXBwLiBcblx0XHQvLyBjb25zdCBzdGF0dXNCYXJJdGVtRWwgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcblx0XHQvLyBzdGF0dXNCYXJJdGVtRWwuc2V0VGV4dCgnU3RhdHVzIEJhciBUZXh0Jyk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoXG5cdFx0e1xuXHRcdFx0aWQ6ICdwNC1jaGVja291dCcsXG5cdFx0XHRuYW1lOiAnUDQgQ2hlY2tvdXQnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHsgdGhpcy5leGVjUDRDb21tYW5kKFwiZWRpdFwiKTsgfVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKFxuXHRcdHtcblx0XHRcdGlkOiAncDQtYWRkJyxcblx0XHRcdG5hbWU6ICdQNCBBZGQnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHsgdGhpcy5leGVjUDRDb21tYW5kKFwiYWRkXCIpOyB9XG5cdFx0fSk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHsgfVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIFxuXHR7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IFxuXHRcdFx0T2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIFxuXHR7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdC8vIEV4ZWN1dGVzIGEgcDQgY29tbWFuZCBvbiB0aGUgY3VycmVudCBmaWxlLlxuXHRhc3luYyBleGVjUDRDb21tYW5kKGNtZDogc3RyaW5nKVxuXHR7XG5cdFx0Y29uc3QgYWRhcHRlciA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXI7XG5cdFx0aWYgKCEoYWRhcHRlciBpbnN0YW5jZW9mIEZpbGVTeXN0ZW1BZGFwdGVyKSlcblx0XHRcdHJldHVybjtcblxuXHRcdGNvbnN0IGN3ZCA9IGFkYXB0ZXIuZ2V0QmFzZVBhdGgoKTtcblx0XHRjb25zdCBlbnYgPSBwcm9jZXNzLmVudjtcblxuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yPy5maWxlO1xuXHRcdGlmIChmaWxlID09IG51bGwpXG5cdFx0e1xuXHRcdFx0bmV3IE5vdGljZShcIk5vIGZpbGUgdG8gY2hlY2tvdXRcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZXhlYyhgcDQgJHtjbWR9ICR7ZmlsZS5wYXRofWAsIFxuXHRcdHtcblx0XHRcdGN3ZDogY3dkLFxuXHRcdFx0ZW52OiBlbnYsXG5cdFx0fSwgXG5cdFx0KGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+XG5cdFx0e1xuXHRcdFx0aWYgKGVycilcblx0XHRcdHtcblx0XHRcdFx0bmV3IE5vdGljZShgcDQgJHtjbWR9ICR7ZmlsZX0gZmFpbGVkOlxcbiR7ZXJyfWApXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bmV3IE5vdGljZShgcDQgJHtjbWR9ICR7ZmlsZX1cXG4ke3N0ZG91dH1gKTtcblx0XHR9KTtcblx0fVxufVxuXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBV087QUFFUCxJQUFNLEVBQUUsS0FBSyxJQUFJLFFBQVEsZUFBZTtBQVN4QyxJQUFNLG1CQUNOO0FBQUEsRUFDQyxXQUFXO0FBQ1o7QUFFQSxJQUFxQixXQUFyQixjQUFzQyx1QkFDdEM7QUFBQSxFQUdDLE1BQU0sU0FDTjtBQUNDLFVBQU0sS0FBSyxhQUFhO0FBaUJ4QixTQUFLO0FBQUEsTUFDTDtBQUFBLFFBQ0MsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sVUFBVSxNQUFNO0FBQUUsZUFBSyxjQUFjLE1BQU07QUFBQSxRQUFHO0FBQUEsTUFDL0M7QUFBQSxJQUFDO0FBRUQsU0FBSztBQUFBLE1BQ0w7QUFBQSxRQUNDLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLFVBQVUsTUFBTTtBQUFFLGVBQUssY0FBYyxLQUFLO0FBQUEsUUFBRztBQUFBLE1BQzlDO0FBQUEsSUFBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUFFO0FBQUEsRUFFYixNQUFNLGVBQ047QUFDQyxTQUFLLFdBQ0osT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNEO0FBQUEsRUFFQSxNQUFNLGVBQ047QUFDQyxVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUFBO0FBQUEsRUFHQSxNQUFNLGNBQWMsS0FDcEI7QUFoRkQ7QUFpRkUsVUFBTSxVQUFVLEtBQUssSUFBSSxNQUFNO0FBQy9CLFFBQUksRUFBRSxtQkFBbUI7QUFDeEI7QUFFRCxVQUFNLE1BQU0sUUFBUSxZQUFZO0FBQ2hDLFVBQU0sTUFBTSxRQUFRO0FBRXBCLFVBQU0sUUFBTyxVQUFLLElBQUksVUFBVSxpQkFBbkIsbUJBQWlDO0FBQzlDLFFBQUksUUFBUSxNQUNaO0FBQ0MsVUFBSSx1QkFBTyxxQkFBcUI7QUFDaEM7QUFBQSxJQUNEO0FBRUE7QUFBQSxNQUFLLE1BQU0sT0FBTyxLQUFLO0FBQUEsTUFDdkI7QUFBQSxRQUNDO0FBQUEsUUFDQTtBQUFBLE1BQ0Q7QUFBQSxNQUNBLENBQUMsS0FBSyxRQUFRLFdBQ2Q7QUFDQyxZQUFJLEtBQ0o7QUFDQyxjQUFJLHVCQUFPLE1BQU0sT0FBTztBQUFBLEVBQWlCLEtBQUs7QUFDOUM7QUFBQSxRQUNEO0FBRUEsWUFBSSx1QkFBTyxNQUFNLE9BQU87QUFBQSxFQUFTLFFBQVE7QUFBQSxNQUMxQztBQUFBLElBQUM7QUFBQSxFQUNGO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
