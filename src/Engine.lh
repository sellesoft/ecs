$ local cmn = require "common"

#include "iro/time/Time.h"
#include "iro/containers/AVL.h"
#include "iro/Unicode.h"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "sdata/SourceDataFileReg.lh"
@@lpp.import "event/BroadcastEventBus.lh"
@@lpp.import "editor/Editor.lh"

namespace ui
{
struct Inspector;
}

namespace hr
{
struct Reloader;
}

/* ============================================================================
 */
struct LaunchArg 
{ 
  u64 key; 
  String value; 

  static u64 getAVLKey(const LaunchArg& x) { return x.key; }
};
typedef iro::AVL<LaunchArg> LaunchArgs;

/* ============================================================================
 */
struct Engine
{
  f64 frame_start_time;

  LaunchArgs launch_args;

  BroadcastEventBus broadcast_eventbus;

  AssetMgr assetmgr;

  hr::Reloader* reloader;

  // Time point at which the Engine finished initialization.
  TimePoint init_time;

  Editor editor;

  b8 init();
  void deinit();

  b8 wantHotReload();

  struct UpdateResult
  {
    // Something has caused the Engine to want to close and exit the process.
    b8 should_close = false;
  };

  UpdateResult update();

  template<typename E, typename S>
  void subscribeToBroadcast(S* sub, void (S::* in)(E&))
  {
    // Evil magic necessary to convince clang that passing this
    // as the sub of the callback is ok.
    static union
    {
      void (S::* x)(E&);
      void (*y)(void*, E&);
    } x { in };

    broadcast_eventbus.subscribeTo<E>(sub, x.y);
  }
};
