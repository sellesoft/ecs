$ local cmn = require "common"

@@lpp.import "Engine.lh"

#include "iro/Logger.h"
#include "iro/time/Time.h"
using namespace iro;

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "sdata/SourceDataFile.lh"
@@lpp.import "sdata/SourceDataParser.lh"
@@lpp.import "event/BroadcastEventBus.lh"
@@lpp.import "graphics/Font.lh"
@@lpp.import "graphics/CompiledShader.lh"

@@lpp.import "game/client/Client.lh"
@@lpp.import "game/server/Server.lh"

@log.ger(engine, Info)

/* ----------------------------------------------------------------------------
 */
b8 Engine::init()
{
  INFO("initializing engine...\n");
  TimePoint start_time = TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(start_time.s).toSeconds()
    + TimeSpan::fromNanoseconds(start_time.ns).toSeconds();

$ local initSystem = function(act, name)
    {
      INFO("initializing $(name)\n");
      auto start = TimePoint::monotonic();
      if (!$(act))
        return FATAL("failed to initialize $(name)\n");
      INFO("finished initializing $(name) in ",
           WithUnits(TimePoint::monotonic() - start), "\n");
    }
$ end

  @initSystem(broadcast_eventbus.init(),                broadcast event bus);
  @initSystem(assetmgr.init(&mem::stl_allocator),       asset mgr);

  Editor::InitParams editor_params = 
  {
    .engine = *this,
  };

  @initSystem(editor.init(editor_params), Editor);

  init_time = TimePoint::now();

  INFO("done initializing in ",
    WithUnits(TimePoint::monotonic() - start_time), "\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Engine::deinit()
{
  editor.deinit();
  assetmgr.deinit();
  broadcast_eventbus.deinit();
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::wantHotReload()
{
#if ECS_HOT_RELOAD
#endif
  return false;
}

/* ----------------------------------------------------------------------------
 */
Engine::UpdateResult Engine::update()
{
  UpdateResult result = {};

  Editor::UpdateResult editor_result = editor.update({});

  if (editor_result.should_deinit)
    result.should_close = true;

  return result;
}
