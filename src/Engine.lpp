$ local cmn = require "common"

@lpp.import "Engine.lh"

#include "iro/time/Time.h"
using namespace iro;

@lpp.import "reflect/Packing.lh"
@lpp.import "reflect/CompiledData.lh"
@lpp.import "sdata/SourceDataFile.lh"
@lpp.import "sdata/SourceDataParser.lh"
@lpp.import "event/BroadcastEventBus.lh"

@lpp.import "game/client/Client.lh"
@lpp.import "game/server/Server.lh"

@log.import

/* ----------------------------------------------------------------------------
 */
b8 Engine::init()
{
  @log.info(engine, "initializing engine...\n");
  TimePoint start_time = TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(start_time.s).toSeconds()
    + TimeSpan::fromNanoseconds(start_time.ns).toSeconds();

$ local initSystem = function(act, name)
    {
      @log.info(engine, "initializing $(name)\n");
      auto start = TimePoint::monotonic();
      if (!$(act))
        return @log.error(engine, "failed to initialize $(name)\n");
      @log.info(engine, "finished initializing $(name) in ",
           WithUnits(TimePoint::monotonic() - start), "\n");
    }
$ end

  @initSystem(broadcast_eventbus.init(), broadcast event bus);

  editor::Editor::InitParams editor_params = 
  {
    .engine = *this,
    .eventbus = broadcast_eventbus,
  };

  @initSystem(editor.init(editor_params), Editor);

  init_time = TimePoint::now();

  @log.info(engine, "done initializing in ",
    WithUnits(TimePoint::monotonic() - start_time), "\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Engine::deinit()
{
  editor.deinit();
  broadcast_eventbus.deinit();
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::wantHotReload()
{
  return editor.wantHotReload();
}

/* ----------------------------------------------------------------------------
 */
Engine::UpdateResult Engine::update()
{
  UpdateResult result = {};

  { using namespace editor;
      
    Editor::UpdateParams update_params = 
    {
      .eventbus = broadcast_eventbus,
    };

    Editor::UpdateResult editor_result = editor.update(update_params);

    if (editor_result.should_deinit)
      result.should_close = true;
  }

  return result;
}
