/* 
 *  Manager for blobs of memory that need to be ref counted and garbage 
 *  collected. 
 *
 *  Assets may be named, allowing us to reuse them as needed. But they can
 *  also be anonymous. It is good practice, though, to try and consistently
 *  name resources such that they may be reused!
 */  

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/AVL.h"
#include "iro/containers/LinkedPool.h"
#include "iro/fs/fs.h"
#include "iro/memory/Allocator.h"
#include "iro/memory/Bump.h"

$ local cmn = require "common"

@lpp.import "asset/Asset.lh"

using namespace iro;


/* ============================================================================
 */
struct AssetMgr
{
  typedef DLinkedPool<Asset> AssetPool;
  typedef AVL<Asset> AssetMap;

  AssetPool pool;
  AssetMap map;

  mem::Allocator* allocator;

  String data_mount;

  b8 init(mem::Allocator* allocator, String data_mount);
  void deinit();

  String formAssetPath(fs::PathBuffer* buffer, String name, String type) const;

  Asset* allocateAsset(String name);
  Asset* loadAssetFromDisk(String name, String type);
  Asset* reloadAsset(String name, String type);
  Asset* tryReloadAsset(String name, String type);

  void unloadAsset(Asset* asset);

  // Attempts to find an asset from a given name and returns it.
  Asset* findAsset(String name, String type) const;
  Asset* findAsset(String path) const;
};
