$ local cmn = require "common"

@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

#include "iro/Logger.h"
#include "iro/fs/File.h"

@log.ger(srcdata.file, Info)

/* ----------------------------------------------------------------------------
 */
b8 SourceDataFile::init()
{
  if (!string_cache.init())
    return ERROR("failed to init string cache\n");

  if (!data_pool.init())
    return ERROR("failed to init data pool\n");

  if (!aux_data_list.init())
    return ERROR("failed to init aux data list\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void SourceDataFile::deinit()
{
  string_cache.deinit();
  
  for (SourceData& data : aux_data_list)
    data.destroy();

  if (returned_data != nullptr)
    returned_data->destroy();

  data_pool.deinit();
  aux_data_list.deinit();
}

/* ----------------------------------------------------------------------------
 */
b8 SourceDataFile::from(SourceDataFile* sfile, String path)
{
  using namespace iro;
  using namespace iro::fs;

  // Basic check that the provided sfile is not yet initialized.
  assert(isnil(sfile->data_pool) && 
        "SourceDataFile::from given an already initialized sfile");
  
  if (!sfile->init())
    return ERROR("failed to initialize source data file for opening "
                 "from path '", path, "'\n");
  auto failsafe = deferWithCancel { sfile->deinit(); };

  File file = File::openForRead(path);
  if (isnil(file))
    return ERROR("failed to open source data file at path '", path, "'\n");
  defer { file.close(); };
  
  if (!parseSourceDataFile(sfile, &file, path))
    return ERROR("failed to parse source data file at path '", path, "'\n");

  failsafe.cancel();
  return true;
}

/* ----------------------------------------------------------------------------
 */
SourceData* SourceDataFile::allocateSourceData()
{
  return data_pool.add();
}

/* ----------------------------------------------------------------------------
 */
SourceData* SourceDataFile::addAuxData()
{
  auto out = allocateSourceData();
  aux_data_list.pushTail(out);
  return out;
}

/* ----------------------------------------------------------------------------
 */
SourceData* SourceDataFile::addReturnData()
{
  assert(returned_data == nullptr);
  returned_data = allocateSourceData();
  return returned_data;
}

/* ----------------------------------------------------------------------------
 */
SourceData* SourceDataFile::findAuxData(String name)
{
  for (SourceData& aux : aux_data_list)
  {
    if (aux.name == name)
      return &aux;
  }

  return nullptr;
}

