/*
 *  Def types related to the build system.
 */

$ require "common"
$ local m = require "reflect.Metadata"

@@lpp.import "reflect/types/Array.lh"

#include "iro/Unicode.h"

namespace build
{

using namespace iro;

@m.def
typedef reflect::Array<String> AssetList;

@m.def
enum class TargetKind
{
  // We don't know what this target represents.
  Unknown,

  // A file in our source data format.
  SourceData,

  // Source data that has been compiled.
  // This typically has a SourceData target as its prereq.
  CompiledData,

  // Some kind of asset that is not source data, eg. a texture or shader
  // to be compiled.
  SourceAsset,
  
  // A compiled SourceAsset.
  CompiledAsset,
};

static b8 isCompiledTarget(TargetKind kind)
{
  return kind == TargetKind::CompiledData || 
         kind == TargetKind::CompiledAsset;
}

static b8 isSourceTarget(TargetKind kind)
{
  return kind == TargetKind::SourceData ||
         kind == TargetKind::SourceAsset;
}

@m.def 
struct TargetInfo
{
  String name;
  String type;
  TargetKind kind;
};

typedef reflect::Array<TargetInfo> TargetInfoList;

@m.def
struct TargetMetadata
{
  TargetInfoList prereqs;
  TargetInfoList linked_targets;
  TargetInfoList secondary_outputs;
};

}
