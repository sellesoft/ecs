$ require "common"

@lpp.import "editor/Editor.lh"
@lpp.import "editor/ClientInstance.lh"
@lpp.import "graphics/vk.lh"

@log.import

namespace editor
{

/* ----------------------------------------------------------------------------
 */
b8 ClientInstance::init(this S& self)
{
  vec2u winsize = vec2u(self.editor->window.size);

  self.client_render = gfx::Texture::createForRenderTarget(*self.editor->vk,
  {
    .size = winsize,
    .debug_name = "client instance texture"_str
  });
  if (isnil(self.client_render))
    return @log.error(editor, 
      "failed to initialize a client render texture\n");

  reflect::Linker linker = 
  { 
    .resource_mgr = self.editor->resource_mgr,
    .asset_mgr = self.editor->asset_mgr,
  };

  Client::InitParams client_params = 
  {
    .vk = *self.editor->vk,
    .linker = linker,
  };

  if (!self.client.init(client_params))
    return @log.error(editor, "failed to initialize a client instance\n");

  self.client.setViewport(Rect::from({0,0}, vec2f(winsize)));

  return true;
}

/* ----------------------------------------------------------------------------
 */
void ClientInstance::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
void ClientInstance::update() 
{
  InputState input;
  editor->input.cloneInputState(&input);

  Client::UpdateParams params = 
  {
    .input = input,
  };

  client.update(params);
}

/* ----------------------------------------------------------------------------
 */
void ClientInstance::placeUI(ui::UI& ui, const EditorSkinDef& skin)
{
  ui.putQuad(ui.getBounds(), client_render.getHandle(), 0xffffffff);
}

/* ----------------------------------------------------------------------------
 */
void ClientInstance::notifyAssetChanged(String name, String type)
{
  reflect::Linker linker = 
  { 
    .resource_mgr = editor->resource_mgr,
    .asset_mgr = editor->asset_mgr,
  };

  client.notifyAssetChanged(name, type, linker);
}

/* ----------------------------------------------------------------------------
 */
void ClientInstance::render(gfx::Vulkan& vk) 
{
  gfx::RenderTarget target = 
  { 
    .image = client_render.image,
    .view = client_render.view,
  };

  Client::RenderParams client_params = 
  {
    .vk = vk,
    .target = target,
  };

  client.render(client_params);

  gfx::vk::prepareImageForSampling(&vk, client_render.image);
}


}
