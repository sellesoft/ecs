$ require "common"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/concurrent/Thread.h"

@lpp.import "editor/Skin.defs.lh"
@lpp.import "editor/MenuBar.lh"
@lpp.import "editor/FileWatcherThread.lh"
@lpp.import "editor/FileExplorer.lh"

@lpp.import "ui/UI.lh"
@lpp.import "input/InputMgr.lh"
@lpp.import "window/Window.lh"
@lpp.import "graphics/RenderPass.lh"
@lpp.import "build/BuildSystem.lh"
@lpp.import "graphics/Texture.resource.lh"
@lpp.import "asset/AssetMgr.lh"

@lpp.import "graphics/vk.lh"

#include "iro/os/FileWatcher.h"

struct BroadcastEventBus;

namespace editor
{

struct BuildThread;
struct FileWatcherThread;

/* ============================================================================
 */
struct Editor
{
  InputMgr input;
  Window window;

  // TODO(sushi) the graphics stuff will probably need to moved up a layer, 
  //             somehow.. considering that the debug system shouldn't 
  //             be considered a part of the Editor.
  gfx::Vulkan* vk;
  gfx::ResourceMgr resource_mgr;

  AssetMgr asset_mgr;

  ui::UI ui;

  EditorSkinDefLink l_skin;
  gfx::TextureLink l_white_texture;

  build::BuildSystem build_system;
  BuildThread* build_thread;

  iro::os::FileWatcher file_watcher;
  FileWatcherThread* watcher_thread;

  // Set when the Editor finishes initializing.
  TimePoint start_time;

  // Marks when the Editor last started a frame.
  TimePoint frame_mark_time;

  // UI elements.
  MenuBar menu_bar;
  FileExplorer file_explorer;

  struct InitParams
  {
    Engine& engine;
    BroadcastEventBus& eventbus;
  };

  b8 init(const InitParams& params);
  void deinit();

  void placeUI();

  struct UpdateParams
  {
    BroadcastEventBus& eventbus;
  };
  struct UpdateResult
  {
    // No more calls to update() should occur and the Editor should be 
    // deinitialized.
    b8 should_deinit = false;
  };
  UpdateResult update(const UpdateParams& params);

  b8 render(this Editor& self);
};

}
