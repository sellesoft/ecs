$ require "common"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/concurrent/Thread.h"

@@lpp.import "editor/Skin.defs.lh"

@@lpp.import "ui/UI.lh"
@@lpp.import "input/InputMgr.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "build/BuildSystem.lh"
@@lpp.import "graphics/Texture.resource.lh"
@@lpp.import "asset/AssetMgr.lh"

struct BuildThread;

/* ============================================================================
 */
struct Editor
{
  InputMgr input;
  Window window;

  build::BuildSystem build_system;

  gfx::Renderer renderer;
  gfx::ResourceMgr resource_mgr;

  AssetMgr asset_mgr;

  ui::UI ui;

  EditorSkinDefLink l_skin;
  gfx::TextureLink l_white_texture;

  gfx::TextureLink l_test_texture;

  BuildThread* build_thread;

  u8 buffer[255];
  s32 buffer_len;

  // Set when the Editor finishes initializing.
  TimePoint start_time;

  TimePoint frame_mark_time;

  struct InitParams
  {
    Engine& engine;
  };

  b8 init(const InitParams& params);
  void deinit();

  struct UpdateParams
  {
  };
  struct UpdateResult
  {
    // No more calls to update() should occur and the Editor should be 
    // deinitialized.
    b8 should_deinit = false;
  };
  UpdateResult update(const UpdateParams& params);

  struct RenderParams
  {
  };
  struct RenderResult
  {
  };
  RenderResult render(const RenderParams& params);
};

