$ require "common"

#include "iro/fs/fs.h"
#include "iro/fs/File.h"

#include "iro/concurrent/Atomic.h"
#include "iro/concurrent/ConditionVar.h"
#include "iro/concurrent/Mutex.h"
#include "iro/print.h"

@lpp.import "editor/Editor.lh"
@lpp.import "editor/Editor.events.lh"

@lpp.import "Engine.lh"

@lpp.import "graphics/RenderTarget.lh"
@lpp.import "graphics/Texture.defs.lh"
@lpp.import "graphics/Shader.defs.lh"
@lpp.import "graphics/Font.defs.lh"

@lpp.import "reflect/CompiledData.lh"

@lpp.import "build/BuildSystem.lh"

@lpp.import "reflect/rtr.lh"
@lpp.import "reflect/Linker.lh"

@log.import

$ local function logerr(...) return log.error("editor", ...) end
$ local function loginfo(...) return log.info("editor", ...) end

namespace editor
{

/* ============================================================================
 */
struct BuildThread
{
  enum class State
  {
    Idle,
    RequestBuild,
    Building,

    BuildSuccess,
    BuildFailed,
  };

  conc::Thread thread;
  conc::Atomic<State> state;
  conc::ConditionVar signal;
  conc::Mutex mutex;
  conc::Atomic<b8> terminate;

  // Cleared before each build.
  // This should not be accessed until the thread is idle.
  build::TargetList built_targets;

  build::BuildSystem* build_system;

  /* --------------------------------------------------------------------------
   */
  b8 init(build::BuildSystem* build_system)
  {
    this->build_system = build_system;

    state.storeRelaxed(State::Idle);
    terminate.storeRelaxed(false);

    signal = conc::ConditionVar::create();
    mutex = conc::Mutex::create();

    built_targets.init();

    thread = conc::Thread::create(this, [](void* opaque) -> void*
    {
      ((BuildThread*)opaque)->worker();
      return nullptr;
    });

    return true;
  }

  /* --------------------------------------------------------------------------
   */
  void deinit()
  {
    terminate.storeSeqCst(true);
    signal.signalOne();
    thread.join();

    built_targets.deinit();
    thread = nil;
    signal.destroy();
    mutex.destroy();
  }

  /* --------------------------------------------------------------------------
   */
  b8 isIdle() const
  {
    return state.loadSeqCst() == State::Idle;
  }

  /* --------------------------------------------------------------------------
   */
  void requestBuild()
  {
    assert(isIdle());
    built_targets.clear();
    state.storeSeqCst(State::RequestBuild);
    signal.signalOne();
  }

  /* --------------------------------------------------------------------------
   */
  b8 isBuilding() const
  {
    return state.loadSeqCst() == State::Building;
  }

  /* --------------------------------------------------------------------------
   */
  b8 hasResult() const
  {
    State current = state.loadSeqCst();
    return current == State::BuildSuccess || current == State::BuildFailed;
  }

  /* --------------------------------------------------------------------------
   */
  b8 consumeResult()
  {
    State result = state.loadSeqCst();
    assert(result == State::BuildSuccess || result == State::BuildFailed);
    state.storeSeqCst(State::Idle);
    return result == State::BuildSuccess;
  }

  /* --------------------------------------------------------------------------
   */
  void worker()
  {
    for (;;)
    {
      // Sleep until the thread's state is set to RequestBuild or until
      // termination is requested.
      mutex.lock();
      while (state.loadSeqCst() != State::RequestBuild && 
             !terminate.loadSeqCst())
      {
        signal.wait(mutex);
      }
      mutex.unlock();

      if (terminate.loadSeqCst())
        break;

      // If we didn't wake up due to a termination request, then we have to 
      // be in the RequestBuild state.
      assert(state.loadSeqCst() == State::RequestBuild);

      state.storeSeqCst(State::Building);

      b8 success = build_system->build(&built_targets);

      state.storeSeqCst(success? State::BuildSuccess : State::BuildFailed);
    }
  }
};

/* ----------------------------------------------------------------------------
 */
void EditorLog::log(const logging::Entry& entry)
{
  editor->console.pushEntry(entry);
  logging::get()->chan.log(entry);
}

/* ----------------------------------------------------------------------------
 */
b8 Editor::init(const InitParams& params)
{
$ local function initSubSystem(name, code)
  {
    auto start = TimePoint::monotonic();
    b8 success = false;

    $(code)

    if (!success)
      return log.error("failed to initialize $(name)"_str);

    log.info("initialized ", tcolor::magenta, "$(name)", tcolor::reset, 
             " in ", 
             tcolor::green, WithUnits(TimePoint::monotonic() - start), 
             tcolor::reset);
  }
$ end

  if (!log.init(this))
    return false;

  @initSubSystem(CommandBus,
  {
    success = cmd_bus.init();
  })

  @initSubSystem(Console,
  {
    success = console.init();
  })

  console.cmd_bus = &cmd_bus;
  console.editor = this;
  
  @initSubSystem(AssetMgr,
  {
    success = asset_mgr.init(&mem::stl_allocator, "_data"_str);
  });

  @initSubSystem(Input,
  {
    success = input.init();
  })

  @initSubSystem(Window backend,
  {
    success = Window::initializeBackend();
  })

  @initSubSystem(Window,
  {
    success = window.init(params.engine, "ecs editor"_str, input);
  })

  @initSubSystem(Vulkan,
  {
    gfx::vk::CreateParams vk_create_params = 
    {
      .allocator = &mem::stl_allocator,
      .window = window,
    };

    vk = gfx::vk::create(vk_create_params);

    success = vk != nullptr;
  })

  @initSubSystem(gfx::ResourceMgr,
  {
    success = resource_mgr.init(vk);
  })

  fs::PathBuffer cwd_buffer;
  cwd_buffer.len = fs::cwd(cwd_buffer.asBytesBuffer());
  if (cwd_buffer.len == 0)
    return log.error("failed to get current working directory");
  String cwd = String(cwd_buffer);

  @initSubSystem(BuildSystem,
  {
    build::Rule build_rules[] = 
    {
      gfx::getTextureBuildRule(),
      gfx::getShaderBuildRule(),
      gfx::getFontBuildRule(),
      reflect::CompiledData::getBuildRule(),
    };

    fs::PathBuffer compiled_dir_buffer;
    io::formatv(&compiled_dir_buffer, cwd, "/_data"_str);

    fs::PathBuffer trash_dir_buffer;
    io::formatv(&trash_dir_buffer, cwd, "/_trash"_str);

    build::BuildSystem::InitParams build_system_params = 
    {
      .source_mount = cwd,
      .compiled_mount = String(compiled_dir_buffer),
      .trash_mount = String(trash_dir_buffer),
      .rules = makeSlice(build_rules),
      .log = &log,
    };

    success = build_system.init(build_system_params);
  })

  log.info("loading and building asset lists...");

  build_system.loadAssetList("src/editor/Editor.asset_list"_str);
  build_system.loadAssetList("src/ui/UI.asset_list"_str);

  if (!build_system.build())
    return log.error("failed to build required Editor assets");

  log.info("linking Editor skin def...");

  l_skin.name = "assets/skins/Editor"_str;

  reflect::linkData(
    "EditorSkinDefLink"_typeid, 
    &l_skin, 
    resource_mgr, 
    asset_mgr);

  l_white_texture.name = "assets/textures/white"_str;

  reflect::linkData(
    "gfx::TextureLink"_typeid,
    &l_white_texture,
    resource_mgr,
    asset_mgr);

  @initSubSystem(UI,
  {
    ui::UI::InitParams ui_params = 
    {
      .vk = *vk,
      .resource_mgr = resource_mgr,
      .asset_mgr = asset_mgr,
      .viewport = Rect::from(0,0,window.size.x,window.size.y),
      .white_texture = l_white_texture.getHandle(),
    };

    success = ui.init(ui_params);
  })


  log.info("starting build thread...");

  build_thread = mem::stl_allocator.construct<BuildThread>();
  build_thread->init(&build_system);

  log.info("starting file watcher thread...");

  if (!file_watcher.init())
    return log.error("failed to initialize file watcher");

  fs::PathBuffer assets_path;
  io::formatv(&assets_path, cwd, "/assets");

  file_watcher.addWatch(
  {
    .path = String(assets_path),
    .events = os::WatchEventFlags::all(),
    .recursive = true,
  });

  watcher_thread = mem::stl_allocator.construct<FileWatcherThread>();
  watcher_thread->init(&file_watcher);

  menu_bar.init(this, params.eventbus);

  MenuBarTab::Option test_opts[] = 
  {
    { "A"_str, "print A"_str },
    { "B"_str, "print B"_str },
    { "C"_str, "print C"_str },
  };

  menu_bar.registerTab("test"_str, makeSlice(test_opts));

  cmd_bus.registerCommand<Editor>("print"_str, this,
    [](Editor& self, event::CommandArgs args)
    {
      println(args[0]); 
    });

  doc_mgr.init(*this);

  file_explorer.onAllocated();
  file_explorer.changeDir(cwd);

  start_time = TimePoint::monotonic();

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Editor::deinit()
{
  // Wait until the device isn't doing anything to avoid errors.
  gfx::vk::waitForDeviceIdle(vk);

  gfx::vk::destroy(vk, &mem::stl_allocator);

  window.deinit();
  input.deinit();

  asset_mgr.deinit();

  build_thread->terminate.storeSeqCst(true);

  build_system.deinit();

  mem::stl_allocator.free(build_thread);
  mem::stl_allocator.free(watcher_thread);
}

/* ----------------------------------------------------------------------------
 */
b8 Editor::render(this Editor& self)
{
  using namespace gfx;

  // This failing does not necessarily indicate an error, it could be due to
  // the swapchain being out of date. If it is an error, Vulkan will print
  // something.
  if (!vk::beginFrame(self.vk))
    return false;

  self.doc_mgr.render(*self.vk);

  RenderTarget swapchain_target;
  if (!vk::getSwapchainRenderTarget(self.vk, &swapchain_target))
    return self.log.error("failed to get swapchain render target");

  RenderPass pass;
  if (!gfx::vk::beginRenderPass(
        self.vk,
        &pass,
        swapchain_target,
        {0, 0},
        vec2u(self.window.size),
        0x000000ff))
    return false;

  self.ui.render(pass, Rect::from({0,0}, vec2f(self.window.size)));

  vk::endRenderPass(self.vk);

  vk::endFrame(self.vk);

  if (!vk::submitQueue(self.vk))
    return self.log.error("failed to submit queue");

  if (!vk::present(self.vk))
    return self.log.error("failed to present frame");

  return true;
}


/* ----------------------------------------------------------------------------
 */
Editor::UpdateResult Editor::update(const UpdateParams& params)
{
  UpdateResult result = {};

  f32 delta = (TimePoint::monotonic() - frame_mark_time).toSeconds();
  frame_mark_time = TimePoint::monotonic();

  static TimePoint last_print = TimePoint::monotonic();

  TimePoint now = TimePoint::monotonic();
  if ((now - last_print).toMilliseconds() < 10)
    return result;

  // Prepare input state for this frame.
  input.update();

  Window::UpdateResult window_result = window.update(input);

  if (window_result.closed)
  {
    result.should_deinit = true;
    return result;
  }

  if (window_result.size_changed)
    gfx::vk::onWindowResized(vk);

  doc_mgr.update();

  InputState ui_input;
  input.cloneInputState(&ui_input);

  ui::UI::FrameParams ui_frame_params = 
  {
    .input = ui_input,
    .viewport = Rect::from(vec2f(0,0), vec2f(window.size)),
  };

  ui.beginFrame(ui_frame_params);
  {
    const EditorSkinDef& skin = *l_skin;
  
    // Place all open documents.
    doc_mgr.placeUI(ui, skin);
  
    // Place the console and menu bar over everything.
    console.placeUI(ui, skin);
    menu_bar.placeUI(ui, skin);
  }
  ui.endFrame();

  if (!window_result.size_changed)
    render();

  if (input.real_state.wasKeyPressed(Key::B) &&
      input.real_state.isKeyDown(Key::LCtrl))
  {
    log.info("---------------------------------------------------\n",
             "  build requested by keybind...");

    if (build_thread->isIdle())
      build_thread->requestBuild();
  }

  if (build_thread->hasResult())
  {
    if (build_thread->consumeResult())
    {
      gfx::vk::waitForDeviceIdle(vk);

      for (build::Target& built : build_thread->built_targets)
      {
        log.info("reloading ", built, "...");
        if (Asset* asset = asset_mgr.tryReloadAsset(built.name, built.type))
        {
          if (built.kind == build::TargetKind::CompiledData)
          {
            auto* compiled = (reflect::CompiledData*)asset->data;
            compiled->fixPointers();

            log.info("relinking ", built, "...");
            
            reflect::linkData(
              compiled->type,
              compiled->data.ptr.get(),
              resource_mgr,
              asset_mgr);
          }

          resource_mgr.notifyAssetChanged(built.name, built.type);
        }
      }
    }
  }

  if (watcher_thread->readyToConsume())
  {
    for (auto& ev : watcher_thread->consumeEvents())
    {
      using EKind = FileWatcherThread::Event::Kind;

      switch (ev.kind)
      {
      case EKind::Created:
        params.eventbus.raise<FileCreatedEvent>({ .path = ev.path0 });
        break;
      case EKind::Modified:
        params.eventbus.raise<FileModifiedEvent>({ .path = ev.path0 });
        break;
      }
    }
  }

  return result;
}

/* ----------------------------------------------------------------------------
 */
b8 Editor::wantHotReload()
{
  if (input.real_state.wasKeyPressed(Key::R) && 
      input.real_state.isKeyDown(Key::RCtrl))
    return true;

  return false;
}

}
