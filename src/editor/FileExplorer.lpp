$ require "common"

@lpp.import "editor/FileExplorer.lh"
@lpp.import "editor/Skin.defs.lh"
@lpp.import "ui/UI.lh"
@lpp.import "editor/Editor.lh"

#include "iro/fs/fs.h"
#include "iro/fs/Dir.h"
#include "iro/sort.h"

#include "string.h"

@log.import

namespace editor
{

/* ----------------------------------------------------------------------------
 */
b8 FileExplorer::init()
{
  fs::PathBuffer cwd_buffer;
  cwd_buffer.len = fs::cwd(cwd_buffer.asBytesBuffer());
  if (cwd_buffer.len == 0)
    return @log.error(editor, "FileExplorer failed to get cwd on init\n");

  changeDir(String(cwd_buffer));

  return true;
}

/* ----------------------------------------------------------------------------
 */
static s32 entrySort(const DirEntry& l, const DirEntry& r)
{
  // Directories come before files.
  if (l.kind < r.kind)
    return 1;
  if (l.kind > r.kind)
    return -1;

  // TODO(sushi) natural sorting for numbers.

  return strcmp((char*)l.name.ptr, (char*)r.name.ptr);
}

/* ----------------------------------------------------------------------------
 */
void FileExplorer::changeDir(String path) 
{
  if (!fs::path::exists(path))
  {
    @log.warn(editor, 
      "attempt to set FileExplorer to non-existant dir '", path, "'\n");
    return;
  }

  if (!fs::path::isDirectory(path))
  {
    @log.warn(editor, 
      "FileExplorer::changeDir: '", path, "' is not a directory\n");
    return;
  }

  fs::PathBuffer canonical_buffer;
  String canonical = fs::path::canonicalize(&canonical_buffer, path);

  fs::Dir hcd = fs::Dir::open(canonical);
  if (isnil(hcd))
  {
    @log.error(editor, "FileExplorer::changeDir: "
          "failed to open dir '", canonical, "' for entry caching\n");
    return;
  }
  defer { hcd.close(); };

  current_dir.clear();
  io::format(&current_dir, String(canonical_buffer));
  entries.clear();

  for (;;)
  {
    fs::PathBuffer entry_name;
    entry_name.len = hcd.next(entry_name.asBytesBuffer());
    if (entry_name.len == 0)
      break;

    if (entry_name.len == -1)
    {
      @log.error(editor, 
        "FileExplorer::changeDir encountered an error while "
        "caching dir entries\n");
      return;
    }

    fs::PathBuffer full_path;
    io::formatv(&full_path, String(current_dir), '/', String(entry_name));

    DirEntry::Kind kind = DirEntry::Kind::Unknown;
    if (fs::path::isRegularFile(String(full_path)))
      kind = DirEntry::Kind::File;
    else if (fs::path::isDirectory(String(full_path)))
      kind = DirEntry::Kind::Directory;

    if (kind != DirEntry::Kind::Unknown)
    {
      DirEntry* ent = entries.push();
      ent->name = String(entry_name).allocateCopy();
      ent->kind = kind;
    }
  }

  quickSort(entries.begin(), entries.end(), entrySort);
}

/* ----------------------------------------------------------------------------
 */
void FileExplorer::placeUI(ui::UI& ui, const EditorSkinDef& skin)
{
  ui.beginGroup(ui.getBounds().contracted(5.f));
  defer { ui.endGroup(); };

  Rect path_bounds = Rect::zero()
    .setSize(ui.getWidth(), 20.f);

  ui::TextSkin text_skin = skin.text;
  text_skin.align = { 0.f, 0.5f };

  String cd = String(current_dir)
    .removePrefix(String(editor->root_dir));

  if (cd.isEmpty())
    cd = "/"_str;

  ui.putText(path_bounds, cd, text_skin);

  Rect scrollBounds = Rect::zero()
    .alignBottomOutside(path_bounds, 0.f)
    .fillRemainingHeight(ui.getBounds())
    .setWidth(ui.getWidth());

  ui.beginScrollGroup(
    "file-explorer-scroll"_fid, scrollBounds, skin.scroll_bar);

  fs::PathBuffer clicked_dir_path;

  f32 y = 0.f;
  for (DirEntry& ent : entries)
  {
    Rect entry_bounds = Rect::from(
      0.f, y, ui.getWidth(), 15.f);

    if (ent.name == "."_str)
      continue;

    const ui::ItemSkin* icon_skin = nullptr;
    const ui::ButtonSkin* button_skin = nullptr;
    if (ent.kind == DirEntry::Kind::Directory)
    {
      button_skin = &skin.filex.dir_button;
      icon_skin = &skin.filex.dir_icon;
    }
    else
    {
      button_skin = &skin.filex.file_button;
      icon_skin = &skin.filex.file_icon;
    }

    Rect icon_bounds = Rect::zero()
      .setSize(icon_skin->uv.size())
      .alignCenteredLeftInside(entry_bounds, 2.f);

    Rect button_bounds = Rect::zero()
      .setSize(entry_bounds.w - icon_bounds.w, entry_bounds.h)
      .alignRightOutside(icon_bounds, 2.f)
      .alignTopInside(entry_bounds, 0.f);

    if (ui.putButton(
          ui.generateIdFromPointer(&ent),
          button_bounds,
          ent.name, 
          *button_skin))
    {
      if (ent.kind == DirEntry::Kind::Directory)
        io::formatv(&clicked_dir_path, String(current_dir), '/', ent.name);
    }

    ui.putItem(icon_bounds, *icon_skin);

    y += 15.f;
  }

  if (!clicked_dir_path.isEmpty())
    changeDir(String(clicked_dir_path));

  ui.endScrollGroup(skin.scroll_bar);
}


}
