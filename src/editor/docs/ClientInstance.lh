/*
 *  An instance of a game client owned by the Editor. 
 *  
 *  The idea is that the Editor will be able to create multiple of these
 *  to easily simulate multiple Clients being connected to a Server.
 */

$ require "common"

@lpp.import "editor/Doc.lh"
@lpp.import "game/client/Client.lh"
@lpp.import "graphics/Texture.lh"

struct WindowResized;

namespace gfx
{
struct Vulkan;
struct RenderPass;
}

namespace editor
{

struct ServerInstance;

/* ============================================================================
 */
struct ClientInstance : Doc
{
  using S = ClientInstance;

  Client client;

  ServerInstance* connected_server;

  net::MessageBuffer offline_packet_out;
  net::MessageBuffer offline_packet_in;

  gfx::Texture client_render;
  vec2u client_render_size;
  vec2f ui_size;

  void onOpen() override { init(); }

  b8 init(this S& self);
  void deinit();

  b8 resetClient(this ClientInstance& self);

  void update() override;
  void render(gfx::Vulkan& vk) override;

  void placeUI(ui::UI& ui, const EditorSkinDef& skin) override;

  void notifyAssetChanged(String name, String type);
};

}
