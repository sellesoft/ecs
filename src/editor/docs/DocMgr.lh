/*
 *  System which manages Editor Docs.
 */

@lpp.import "editor/Doc.lh"
@lpp.import "editor/MenuBar.lh"
@lpp.import "reflect/TypeId.lh"
@lpp.import "sdata/SourceDataFile.lh"

#include "iro/containers/Array.h"

namespace editor
{

struct DocTreeNode;

/* ============================================================================
 */
struct TrackedDoc
{
  Doc* doc;
};

/* ============================================================================
 */
struct DocTreeSplit
{
  DocTreeNode* first = nullptr;
  DocTreeNode* last = nullptr;
};

/* ============================================================================
 */
struct DocTreeNode
{
  enum class State
  {
    Invalid,

    Single,
    SplitH,
    SplitV,
  };

  State state = State::Invalid;

  f32 size = 1.f;
  Doc* doc = nullptr;

  vec2f last_displayed_size;

  DocTreeNode* parent = nullptr;
  DocTreeNode* next = nullptr;

  b8 dragging = false;
  b8 splitting = false;

  DocTreeSplit split;

  b8 isSplit() const
  {
    return state == State::SplitH || state == State::SplitV;
  }

  b8 isSplitV() const
  {
    return state == State::SplitV;
  }

  b8 isSplitH() const
  {
    return state == State::SplitH;
  }
};

/* ============================================================================
 */
struct ReplaceRequest
{
  DocTreeNode* node;
  rtr::TypeId type;
};

/* ============================================================================
 */
struct DocMgr
{
  Editor* editor;
  Array<Doc*> docs;
  Array<u32> order;

  Pool<DocTreeNode> tree_nodes;

  ReplaceRequest replace_request;

  DocTreeNode tree_root;

  DocTreeNode* dragging_node = nullptr;
  f32 drag_desired_size = 0.f;

  b8 init(Editor& editor);
  void deinit();

  Doc* open(String name, b8 v = true, b8 a = false);
  void close(Doc* doc);

  void placeUI(ui::UI& ui, const EditorSkinDef& skin);
  void update();
  void render(gfx::Vulkan& vk);

  void cacheDocState();
  void loadCachedDocState();
};

}

