/*
 *  Bus for broadcasting events to be handled by systems across the entire
 *  engine.
 */

$ require "common"

#include "iro/Common.h"
#include "iro/containers/List.h"
#include "iro/containers/Pool.h"

using namespace iro;

/* ============================================================================
 */
struct BroadcastEventBus
{
  struct BroadcastEventBusData* data;
  
  template<typename T>
  void subscribeTo(void* subscriber, void (*callback)(void*, T&));

  template<typename E, typename S>
  void subscribeTo(S* sub, void (S::* in)(E&))
  {
    // Evil magic necessary to convince clang that passing 'this'
    // as the sub of the callback is ok.
    // It probably really isn't, though.
    static union
    {
      void (S::* x)(E&);
      void (*y)(void*, E&);
    } x { in };

    subscribeTo<E>(sub, x.y);
  }

  template<typename T>
  void raise(T&& event) const { raise<T>(event); }

  template<typename T>
  void raise(T& event) const;

  b8 init();
  void deinit();
};
