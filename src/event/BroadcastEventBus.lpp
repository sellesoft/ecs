$ local cmn = require "common"
$ local buffer = require "string.buffer"
$ local ast = require "reflect.ast"

$$$ 
local astctx, imported = require "reflect.AstContext" .fromGlobs
{
  "src/**/*.events.lh"
}
$$$
@@imported:get

@@lpp.import "event/BroadcastEventBus.lh"

$ local function eachEvent(f)
$   for decl in astctx.type_decls:each() do
$     if decl.metadata.event == "broadcast" then
$       f(decl)
$     end
$   end
$ end

/* ============================================================================
 */
struct BroadcastEventBusData
{
$ eachEvent(function(decl)
$   local cname = decl:formCSafeName()
  struct $(cname)Subscriber
  {
    void* subscriber;
    void (*callback)(void*, $(decl.type.name)& event);
  };
  Pool<$(cname)Subscriber> $(cname)Subscriber_pool;
  SList<$(cname)Subscriber> $(cname)Subscriber_list;
$ end)
};

$ eachEvent(function(decl)
$   local cname = decl:formCSafeName()
/* ----------------------------------------------------------------------------
 */
template<>
void BroadcastEventBus::subscribeTo<$(decl.type.name)>(
  void* subscriber, 
  void (*callback)(void*, $(decl.type.name)&))
{
  auto* sub = data->$(cname)Subscriber_pool.add();
  sub->subscriber = subscriber;
  sub->callback = callback;
  data->$(cname)Subscriber_list.push(sub);
}

/* ----------------------------------------------------------------------------
 */
template<>
void BroadcastEventBus::raise<$(decl.type.name)>(
    $(decl.type.name)& event) const
{
  for (auto& sub : data->$(cname)Subscriber_list)
  {
    sub.callback(sub.subscriber, event);
  }
}
$ end)

/* ----------------------------------------------------------------------------
 */
b8 BroadcastEventBus::init()
{
  data = mem::stl_allocator.construct<BroadcastEventBusData>();
$ eachEvent(function(decl)
$   local cname = decl:formCSafeName()
  if (!data->$(cname)Subscriber_list.init()) return false;
  if (!data->$(cname)Subscriber_pool.init()) return false;
$ end)
  return true;
}

/* ----------------------------------------------------------------------------
 */
void BroadcastEventBus::deinit()
{
$ eachEvent(function(decl)
$  local cname = decl:formCSafeName()
  data->$(cname)Subscriber_pool.deinit();
  data->$(cname)Subscriber_list.deinit();
$ end)
  mem::stl_allocator.free(data);
}
