$ require "common"

@lpp.import "game/client/Client.lh"
@lpp.import "game/client/GameMgr.lh"

#include "iro/memory/LinkedHeap.h"

@log.import

/* ----------------------------------------------------------------------------
 */
// static void handleConnectCommand(void* context, const CommandArgs& args)
// {
//   Client* client = (Client*)context;
//   if (args.len < 1)
//     return;
//   else if (args[0] == "offline"_str)
//     client->connectToServer(net::Address::createOffline());
//   else if (args[0] == "localhost"_str)
//     client->connectToServer(net::Address::createLocalHost(0));
//   else
//     client->connectToServer(args[0]);
// }

/* ----------------------------------------------------------------------------
 */
b8 Client::init(const InitParams& params)
{
  if (!netmgr.init(&mem::stl_allocator))
    return @log.error(game, "failed to initialize net manager\n");

  cl::GameMgr::InitParams gamemgr_params =
  {
    .vk = params.vk,
    .linker = params.linker,
  };

  if (!gamemgr.init(gamemgr_params))
    return @log.error(game, "failed to initialize game manager\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Client::deinit(gfx::Vulkan& vk)
{
  netmgr.deinit();
  gamemgr.deinit(vk);
}

/* ----------------------------------------------------------------------------
 */
Client::UpdateResult Client::update(const UpdateParams& params)
{
  UpdateResult result = {};

  netmgr.receiveMessages();

  cl::GameMgr::UpdateParams gamemgr_params = 
  {
    .input = params.input,
    .viewport_size = params.viewport_size,
  };

  if (!gamemgr.update(gamemgr_params))
    return result;

  netmgr.sendMessages();

  return result;
}

/* ----------------------------------------------------------------------------
 */
Client::RenderResult Client::render(const RenderParams& params)
{
  cl::GameMgr::RenderParams gamemgr_params = 
  {
    .vk = params.vk,
    .target = params.target,
  };

  gamemgr.render(gamemgr_params);

  return {};
}

/* ----------------------------------------------------------------------------
 */
b8 Client::connectToServer(net::Address address)
{
  @log.trace(game, "connecting to a server\n");
  if (address.type == net::AddressType::Invalid)
    return @log.error(game, "invalid address\n");

  assert(!"reimplement client connection to server");

  return netmgr.connectToServer(address);
}

/* ----------------------------------------------------------------------------
 */
void Client::disconnectFromServer()
{
  netmgr.disconnectFromServer();
}
