/*
 *  Manager of the highest level *client* game state, handling states such as 
 *  the main menu, options, being in a game session, the transitions 
 *  between each state, and the UI that is displayed in them.
 */

$ local cmn = require "common"

@lpp.import "game/shared/entity/EntityMgr.lh"
@lpp.import "game/shared/component/Component.lh"
@lpp.import "game/shared/map/Map.defs.lh"

@lpp.import "game/client/entity/EntitySysMgr.lh"
@lpp.import "game/client/graphics/GameRenderer.lh"

@lpp.import "reflect/Linker.lh"

struct InputState;

namespace gfx { struct View; }

namespace cl
{

/* ============================================================================
 */
struct GameMgr
{
  EntityMgr entmgr;
  EntitySysMgr entsysmgr;
  GameRenderer game_renderer;

  MapDefLink loaded_map;

  Rect viewport;

  struct InitParams
  {
    gfx::Vulkan& vk;
    reflect::Linker& linker;
  };

  b8 init(const InitParams& params);
  void deinit(gfx::Vulkan& vk);

  struct UpdateParams
  { 
    InputState& input;
  };

  b8 update(UpdateParams& params);

  struct RenderParams
  {
    gfx::Vulkan& vk;
    gfx::RenderTarget& target;

    // An optional view to render the game from which will overload the 
    // eye sys' view.
    gfx::View* view;
  };

  b8 render(const RenderParams& params);

  void setViewport(Rect viewport);

  void notifyAssetChanged(String name, String type, reflect::Linker& linker)
  {
    entmgr.notifyAssetChanged(name, type, linker);
  }
};

}
