$ local cmn = require "common"

@lpp.import "game/client/GameMgr.lh"

@lpp.import "Engine.lh"

@lpp.import "reflect/Packing.lh"
@lpp.import "reflect/CompiledData.lh"
@lpp.import "sdata/SourceDataFile.lh"
@lpp.import "sdata/SourceDataParser.lh"

@lpp.import "game/client/graphics/Sprite.comp.lh"

@lpp.import "game/shared/Eye.sys.lh"
@lpp.import "game/client/input/Input.sys.lh"
@lpp.import "game/shared/Movement.comp.lh"
@lpp.import "game/shared/Transform.comp.lh"

@lpp.import "game/shared/map/Map.sys.lh"
@lpp.import "game/shared/map/Map.defs.lh"

@lpp.import "window/Window.events.lh"

@log.import

using namespace iro;

namespace cl
{

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::init(const InitParams& params)
{
  if (!entmgr.init())
    return @log.error(game, "failed to initialize entmgr\n");

  if (!entsysmgr.init({entmgr}))
    return @log.error(game, "failed to initialize entsysmgr\n");

  GameRenderer::InitParams render_params = 
  {
    .vk = params.vk,
    .linker = params.linker,
  };
  if (!game_renderer.init(render_params))
    return @log.error(game, "failed to initialize rendersys\n");

  params.linker.link("MapDefLink"_typeid, "assets/maps/Test"_str, &loaded_map);

  MapSys::LoadParams map_load_params = 
  {
    .assetmgr = params.linker.asset_mgr,
    .entmgr = entmgr,
  };

  if (!entsysmgr.get<MapSys>().load(*loaded_map, map_load_params))
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::deinit(gfx::Vulkan& vk)
{
  entmgr.deinit();
  entsysmgr.deinit();
  game_renderer.deinit(vk);
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::update(UpdateParams& params)
{
  entsysmgr.get<cl::InputSys>().frame_input = params.input;

  if (!entsysmgr.update())
    return @log.error(game, "failed to update entity systems\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::render(const RenderParams& params)
{
  GameRenderer::RenderParams render_params =
  {
    .map = &entsysmgr.get<MapSys>(),
    .entmgr = &entmgr,

    .target = params.target,
    .viewport = viewport,
    .vk = params.vk,
    .view = 
      params.view == nullptr
      ? entsysmgr.get<EyeSys>().view.getViewMat()
      : params.view->getViewMat(),
  };

  if (!game_renderer.render(render_params))
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::setViewport(Rect viewport)
{
  this->viewport = viewport;
  entsysmgr.get<EyeSys>().viewport_size = viewport.size();
}

}
