/*
 *  System for rendering Sprite components (and maybe some other stuff).
 *
 *  Note that this is not an EntitySys, as it doesn't (shouldn't) deal with
 *  events or updating components, it's job is to simply communicate with 
 *  gfx::Renderer to render the game.
 *
 *  TODO(sushi) better name for this, as its not an entity system and so
 *              it adhering to the entity system naming convention could
 *              be confusing.
 */

$ require "common"

#include "iro/Common.h"
#include "math/Rect.h"
#include "math/mat.h"
#include "Color.h"

@lpp.import "graphics/TextureHandle.lh"
@lpp.import "graphics/Texture.resource.lh"
@lpp.import "graphics/Buffer.lh"
@lpp.import "graphics/Pipeline.lh"
@lpp.import "graphics/Pipeline.resource.lh"
@lpp.import "graphics/RenderTarget.lh"
@lpp.import "graphics/Texture.defs.lh"
@lpp.import "reflect/Linker.lh"

namespace gfx 
{ 
struct Vulkan; 
struct RenderPass;
}

struct AssetMgr;
struct EntityMgr;
struct MapSys; // TODO(sushi) not a fan of the GameRenderer using this directly

namespace cl
{

struct GameRenderer;

/* ============================================================================
 */
struct GameRenderer
{
  static constexpr u32 MAX_QUADS = 8192;
  static constexpr u32 MAX_BATCHES = 256;
  static constexpr u32 MAX_EXTERNAL = 8192;

  struct QuadBatch
  {
    u32 quad_count = 0;
    gfx::TextureHandle texture;
  };

  //NOTE: every field is padded to 16 bytes due to std140
  struct Scene
  {
    f32 proj[16];
    f32 view[16];
    f32 resolution_and_time[4];
  };

  struct InitParams
  {
    gfx::Vulkan& vk;
    reflect::Linker& linker;
  };

  b8 init(InitParams& params);
  void deinit(gfx::Vulkan& vk);

  struct RenderParams
  {
    EntityMgr* entmgr;
    MapSys* map;

    vec2u viewport_size;
    mat3x2 view;

    // TODO(sushi) see if it would be better to just start a RenderPass outside
    //             of this call and have it passed in here to simplify what 
    //             this does internally.
    //             Maybe not, because we do buffer stuff during a render, 
    //             which needs Vulkan directly. Hm. I guess RenderPass has 
    //             a pointer to Vulkan, but using that feels weird.
    //             The Buffer stuff sucks majorly though and needs to be 
    //             redone anyways, so we'll deal with this until then.
    gfx::Vulkan& vk;
    gfx::RenderTarget& target;
  };

  b8 render(const RenderParams& params);

  void drawQuad(
    gfx::Vulkan& vk,
    gfx::RenderPass& pass,
    vec2f pos,
    gfx::TextureHandle texture,
    vec4f uv,
    Color color);

  gfx::TextureLink null_texture;

  Scene scene;
  gfx::Buffer scene_uniform_buffer;

  gfx::Buffer background_vertex_buffer;
  gfx::Buffer background_index_buffer;

  gfx::Buffer quads_vertex_buffer;
  gfx::Buffer quads_index_buffer;

  void* mapped_quads_vertex_buffer;

  QuadBatch batches[MAX_BATCHES];
  u32 batch_count = 0;
  u32 quad_count = 0;

  gfx::PipelineLink quad_pipeline_link;
};

}
