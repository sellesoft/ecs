/*
 *  Component used for displaying an entity as a sprite.
 */

$ require "common"
$ local metadata = require "reflect.Metadata"

@[comp] lpp.import "game/shared/component/Component.lh"
@lpp.import "graphics/Texture.resource.lh"
@lpp.import "reflect/types/StringMap.lh"
@lpp.import "reflect/CompiledData.lh"

#include "Color.h"
#include "math/vec.h"
#include "math/Rect.h"

namespace gfx
{
struct CompiledTexture;
}

/* ============================================================================
 */
struct SpriteTexture
{
  gfx::TextureLink texture;

  @metadata.default "{0,0,1,1}"
  Rect uv;

  @metadata.default "{255,255,255,255}"
  Color color;
};

/* ============================================================================
 *  TODO(sushi) I believe this should be in shared/
 */
@metadata.def
struct SpriteStatesDef
{
  reflect::StringMap<SpriteTexture> map;
};

@metadata.links(sprite_states.data)
struct SpriteStatesLink : reflect::TypedCompiledDataLink<SpriteStatesDef> {};

namespace cl
{

/* ============================================================================
 */
@comp.def(Sprite,
{
  SpriteStatesLink states;
},
{
  vec2f bbx;

  $(metadata.default "{255,255,255,255}")
  Color color;

  u32 state;
})

}
