/*
 *  Functions for creating a Server, which contains the server-side systems
 *  and memory needed when the game is running as a server.
 */
$ require "common"

#include "iro/Common.h"
#include "iro/io/StaticBuffer.h"
#include "iro/time/Time.h"

@lpp.import "game/server/NetMgr.lh"
@lpp.import "game/server/ServerAllocator.lh"
@lpp.import "game/server/entity/EntitySysMgr.lh"

struct Engine;

/* ============================================================================
 */
struct Server
{
  enum class State : u8
  {
    Lobby,
    InGame,
  };

  enum class Publicity : u8
  {
    Offline,
    FriendsOnly,
    PasswordProtected,
    Public,
  };

  static const u64 s_max_password_len = 64;

  typedef iro::io::StaticBuffer<s_max_password_len> PasswordBuffer;

  State state;
  Publicity publicity;

  sv::ServerAllocator global_allocator; // cleared on deinit
  sv::ServerAllocator match_allocator; // cleared before each match
  sv::ServerAllocator tick_allocator; // cleared before each tick

  iro::TimeSpan target_timespan;
  u64 tick_index;

  Engine* engine;

  sv::NetMgr netmgr;

  sv::EntitySysMgr entsysmgr;

  struct InitParams
  {
    u64 global_allocation_size;
    u64 match_allocation_size;
    u64 tick_allocation_size;
    s64 target_tickrate_ms;
    u16 max_sessions;
    Publicity publicity;
    PasswordBuffer password;
  };

  b8 init(const InitParams& params);
  void deinit();

  b8 startMatch();
  void endMatch();

  struct UpdateResult
  {
    b8 sim_error = false;
  };

  UpdateResult update();
};
