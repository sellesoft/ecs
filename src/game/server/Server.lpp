/*
 *  Definition of the Server, as well as its interface.
 */
$ require "common"

@lpp.import "Engine.lh"
@lpp.import "game/server/GameSim.lh"
@lpp.import "game/server/NetMgr.lh"
@lpp.import "game/server/Server.lh"
@lpp.import "game/server/ServerAllocator.lh"
@lpp.import "game/shared/entity/EntityId.lh"
@lpp.import "game/shared/Console.lh"
@lpp.import "reflect/CompiledData.lh"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/containers/StackArray.h"
#include "iro/time/Time.h"
#include "iro/concurrent/Thread.h"
#include "iro/io/Stream.h"

@log.import

using namespace iro;

struct MapDef;

/* ----------------------------------------------------------------------------
 */
b8 Server::init(const InitParams& params)
{
  // assert(thread::isMainThread());
  @log.info(game, "creating server...\n");

  using namespace sv;

$ local function createServerAllocator(allocator, size)
  {
    void* mem = mem::stl_allocator.allocate($(size));

    if (!$(allocator).init(mem, $(size)))
      return @log.error(game, 
        "failed to initialize allocator '$(allocator)' with size ", 
        $(size), "\n");

    @log.info(game, "initialized $(allocator) with size ", 
               iro::io::ByteUnits($(size)), '\n');
  }
$ end

  @createServerAllocator(global_allocator, params.global_allocation_size)
  @createServerAllocator(match_allocator, params.match_allocation_size)
  @createServerAllocator(tick_allocator, params.tick_allocation_size)

  target_timespan = 
    TimeSpan::fromMilliseconds(params.target_tickrate_ms);

  @log.info(game, "target tickrate set to ", WithUnits(target_timespan), '\n');

  if (!netmgr.init(
        &global_allocator, 
        this,
        params.max_sessions))
    return @log.error(game, "failed to initialize net manager\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Server::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
b8 Server::startMatch()
{
  return false;
}

/* ----------------------------------------------------------------------------
 */
void stopMatch()
{
}

/* ----------------------------------------------------------------------------
 */
Server::UpdateResult Server::update()
{
  Server::UpdateResult result = {};

  tick_allocator.clear();

  netmgr.receiveMessages();

  if (state == State::InGame)
  {
    if (!entsysmgr.update())
    {
      @log.error(game, "entity system manager update failed\n");
      result.sim_error = true;
    }
  }

  netmgr.sendMessages();

  return result;
}
