/*
 *  Definition of the Server, as well as its interface.
 */
$ require "common"

@@lpp.import "asset/CompiledData.lh"
@@lpp.import "Engine.lh"
@@lpp.import "game/server/GameSim.lh"
@@lpp.import "game/server/NetMgr.lh"
@@lpp.import "game/server/Server.lh"
@@lpp.import "game/server/ServerAllocator.lh"
@@lpp.import "game/shared/entity/EntityId.lh"
@@lpp.import "game/shared/Console.lh"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/containers/StackArray.h"
#include "iro/Logger.h"
#include "iro/time/Time.h"
#include "iro/concurrent/Thread.h"
#include "iro/io/IO.h"

#include <atomic>

@log.ger(server, Debug)

using namespace iro;

struct MapDef;

/* ----------------------------------------------------------------------------
 */
b8 Server::init(const InitParams& params)
{
  // assert(thread::isMainThread());
  @log.info("creating server...\n");

  using namespace sv;
  
  assert(false);

  return false;
}

/* ----------------------------------------------------------------------------
 */
void Server::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
b8 Server::startMatch()
{
  return false;
}

/* ----------------------------------------------------------------------------
 */
void stopMatch()
{
}

/* ----------------------------------------------------------------------------
 */
Server::UpdateResult Server::update()
{
  return {};
}
