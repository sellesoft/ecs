/*
 *  Base of Components.
 */

$ require "common"
$ local m = require "reflect.Metadata"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/LinkedPool.h"

using namespace iro;

@lpp.import "game/shared/entity/EntityId.lh"

/* ============================================================================
 */
@m.def
@m.hidden
// Mark Component as being a type that, when inherited, implies that the 
// derived type is also a def.
@m.inherit_def
struct Component
{
  u64 kind = 0;

  EntityId owner = nil;

  // TODO(sushi) store Components in a map specifically implemented for them,
  //             such that we can avoid needing to store this intrinsically.
  void* node = nullptr;
  
  static u64 getAVLKey(const Component& cmp) { return cmp.kind; }

  b8 is(u64 kind) const { return this->kind == kind; }
  
  template<typename T>
  static void onCreate(Component* comp);

  DefineNilTrait(Component, {0}, x.kind == 0);
};

/* ----------------------------------------------------------------------------
 */
template<typename T>
u64 getComponentKind();
