$ local cmn = require "common"
$ local ast = require "reflect.ast"
$ local List = require "iro.List"
$ local glob = require "iro.fs.glob"
$ local dumpValue = require "iro.util".dumpValue

$$$
local astctx, imported = require "reflect.AstContext" .fromGlobs
{
  "src/**/*.comp.lh",
}
$$$
@imported:get

using namespace iro;

@lpp.import "game/shared/component/Component.lh"

#include "iro/containers/LinkedPool.h"

$ local TComponent = astctx:lookupTypeDecl "Component"
$ local function eachComp(f)
$   for decl in astctx.type_decls:each() do
$     if decl:is(ast.Record) and decl:isDerivedFrom(TComponent) then
$       f(decl)
$     end
$   end
$ end

$ eachComp(function(decl)
/* ----------------------------------------------------------------------------
 */
template<>
u64 getComponentKind<$(decl.qname)>()
{
  return "$(decl.qname)"_hashed;
}

/* ----------------------------------------------------------------------------
 */
template<>
void Component::onCreate<$(decl.qname)>(Component* comp)
{
  comp->kind = getComponentKind<$(decl.qname)>();
}
$ end)
