$ local cmn = require "common"
$ local List = require "iro.List"
$ local ast = require "reflect.ast"

$$$
local astctx, imported = require "reflect.AstContext" .fromGlobs
{
    "src/**/*.events.lh",
    "src/**/*.comp.lh",
}
$$$
$(imported)

@lpp.import "game/shared/entity/EntityLoader.lh"

@lpp.import "game/shared/entity/EntityMgr.lh"
@lpp.import "game/shared/entity/Entity.defs.lh"

@lpp.import "game/shared/component/Component.lh"

#include "iro/Common.h"
#include "iro/Unicode.h"

@log.import

$ local TComponent = astctx:lookupTypeDecl "Component"
$ assert(TComponent)

$ local function eachComp(f)
$   for decl in astctx.type_decls:each() do
$     if decl:is(ast.Record) and decl:isDerivedFrom(TComponent) then
$       f(decl)
$     end
$   end
$ end

/* ----------------------------------------------------------------------------
 */
EntityId loadEntity(Entity* ent, const EntityDefLink& l_def, EntityMgr& entmgr)
{
  ComponentMgr& cmpmgr = entmgr.cmpmgr;
  const EntityDef& def = *l_def;

  ent->def_id = l_def.name.hash();

  for (auto& compdef : def.components)
  {
    switch (compdef.type.val)
    {
$ eachComp(function(decl)
    case "$(decl.qname)Def"_typeid_val:
      {
        auto* comp = cmpmgr.allocateComponent<$(decl.qname)>();
        comp->def = compdef.getAs<$(decl.qname)Def>();

        entmgr.addComp(ent, comp);
      }
      break;
$ end)
    default:
      return @log.error(game, "unknown ComponentDef type\n"),
             nil;
    }
  }

  if (nullptr == ent->tryComp<Transform>())
  {
    // All entities must have a transform.
    entmgr.addComp(ent, cmpmgr.allocateComponent<Transform>());
  }

  return entmgr.getEntityId(ent);
}

/* ----------------------------------------------------------------------------
 */
EntityId loadEntity(const EntityDefLink& l_def, EntityMgr& entmgr)
{
  const EntityDef& def = *l_def;

  if (isnil(def.name))
    return @log.error(game, "all entities must have a name\n"),
           nil;

  EntityId entid = entmgr.createEntity(def.name);
  if (isnil(entid))
    return @log.error(game, 
      "entity manager failed to create entity '", def.name, "'\n"),
      nil;

  Entity* ent = entmgr.getEntity(entid);

  return loadEntity(ent, l_def, entmgr);
}

