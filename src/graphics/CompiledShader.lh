/*
 * Asset type for pre-compiled shaders
 */

$ require "common"
$ local metadata = require "reflect.Metadata"

#include "iro/Common.h"
#include "iro/Unicode.h"

@@lpp.import "core/OffsetPtr.lh"
@@lpp.import "graphics/Shader.lh"
@@lpp.import "graphics/ShaderParams.lh"
@@lpp.import "asset/Asset.lh"

using namespace iro;

namespace build { struct Rule; }

namespace gfx
{

/* ============================================================================
 * Note that this structure represents exactly what we save to disk.
 */
struct CompiledShader
{
  ShaderStage stage;
  OffsetSlice<u8> binary;
};

@metadata.links(shader.compiled)
struct CompiledShaderLink : TypedAssetLink<CompiledShader> {};

struct CompileShaderParams
{ 
  // Path to compiled ShaderDef defining this shader.
  String input_path;
  String output_path;
};

b8 compileShader(const CompileShaderParams& params);

build::Rule getShaderBuildRule();

} // namespace gfx
