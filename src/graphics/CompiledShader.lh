/*
 * Asset type for pre-compiled shaders
 */

$ require "common"
$ local m = require "reflect.Metadata"

#include "iro/Common.h"
#include "iro/Unicode.h"

@@lpp.import "core/OffsetPtr.lh"
@@lpp.import "graphics/Shader.lh"
@@lpp.import "graphics/ShaderParams.lh"
@@lpp.import "asset/Asset.lh"

using namespace iro;

struct AssetMgr;

namespace gfx
{

/* ============================================================================
 * Note that this structure represents exactly what we save to disk.
 */
@m.compiled_data_type(shader.compiled)
struct CompiledShaderData
{
  ShaderStage stage;
  OffsetSlice<u8> binary;
};

typedef TypedAssetRef<CompiledShaderData> CompiledShaderDataRef;

struct CompileShaderParams
{ 
  // Path to compiled ShaderDef defining this shader.
  String input_path;
  String output_path;
};

b8 compileShader(const CompileShaderParams& params);

/* ============================================================================
 */
struct CompiledShader
{
  CompiledShaderDataRef asset;
  Shader gfx_shader;

  static s64 writeDataPath(io::IO* io, String name, AssetMgr& assetmgr);

  static CompiledShader* load(
    String name,
    AssetMgr& assetmgr,
    Renderer& renderer);

  void unload(AssetMgr& assetmgr, Renderer& renderer);

  struct CompileParams
  {
    String          name;
    ShaderStage     stage;
    mem::Allocator* allocator;
    AssetMgr*       assetmgr;
  };

  static b8 compileGLSL(CompileParams& params);

  const CompiledShaderData& getData() const
  {
    return *asset;
  }
};

typedef TypedAssetRef<CompiledShader> CompiledShaderRef;

} // namespace gfx
