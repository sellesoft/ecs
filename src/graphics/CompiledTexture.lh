/*
 *  A Texture we compile from some raw asset on disk.
 */

$ require "common"
$ local metadata = require "reflect.Metadata"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/memory/Allocator.h"

@@lpp.import "core/OffsetPtr.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "graphics/TextureParams.lh"

struct AssetMgr;

namespace iro::fs { struct File; }
namespace iro::io { struct IO; }
namespace build { struct Rule; }

namespace gfx
{

struct Renderer;

/* ============================================================================
 *  Note that this structure represents exactly what we save to disk.
 */
struct CompiledTexture
{
  s32 width;
  s32 height;

  ImageFormat format;

  OffsetPtr<void> pixels;
};

@metadata.links(texture.compiled)
struct CompiledTextureLink : TypedAssetLink<CompiledTexture> {};

b8 compileTexture(String data_path, String output_path);

b8 compileTextureFromMemory(
  String output_path,
  void* data,
  u32 width,
  u32 height,
  ImageFormat format);

b8 compileTextureFromMemory(
  void* data,
  fs::File* file,
  u32 width,
  u32 height,
  ImageFormat format);

build::Rule getTextureBuildRule();

}
