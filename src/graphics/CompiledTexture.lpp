$ local cmn = require "common"

#include "iro/io/IO.h"
#include "iro/fs/File.h"
#include "iro/fs/fs.h"
#include "iro/Platform.h"
#include "iro/Logger.h"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/DescriptorSetLayout.lh"
@@lpp.import "graphics/DescriptorSet.lh"

#include "cassert"

namespace gfx
{

@defFileLogger(ecs.texture, Debug)

// TODO(sushi) put somewhere common.
typedef io::StaticBuffer<512> PathBuffer;

/* ----------------------------------------------------------------------------
 */
CompiledTexture* CompiledTexture::load(
    String name,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  assert(false);
  return nullptr;

  // using namespace fs;
  //
  // if (CompiledTexture* existing = renderer.resource_mgr.findTexture(name))
  //   return existing;
  //
  // TRACE("loading '", name, "'\n");
  //
  // PathBuffer data_path_buf;
  // writeDataPath(&data_path_buf, name, assetmgr);
  //
  // String data_path = data_path_buf.asStr();
  //
  // assert(nullptr == assetmgr.findAsset(data_path));
  //
  // if (!path::exists(data_path))
  // {
  //   ERROR("attempt to load texture '", name, "' but there is no asset "
  //         "at path '", data_path, "'\n");
  //   return nullptr;
  // }
  //
  // Asset* asset = assetmgr.loadAssetFromDisk(data_path);
  // if (asset == nullptr)
  // {
  //   return nullptr;
  // }
  //
  // auto* texture = renderer.resource_mgr.createTexture(name);
  // if (texture == nullptr)
  // {
  //   ERROR("failed to allocate texture '", name, "'\n");
  //   return nullptr;
  // }
  //
  // texture->asset.name = asset->name;
  // texture->asset.asset = asset;
  //
  // RefLoadParams load_params = 
  // {
  //   .assetmgr = assetmgr,
  //   .renderer = renderer,
  // };
  //
  // assert(false);
  // // if (!texture->asset.load(load_params))
  // // {
  // //   ERROR("failed to load asset\n");
  // //   return nullptr;
  // // }
  //
  // auto& data = texture->getData();
  // assert(data.width != 0 && data.height != 0);
  //
  // texture->image = Image::create(
  //   renderer,
  //   {
  //     .usage = data.usage,
  //     .format = data.format,
  //     .pixels = data.pixels.get(),
  //     .size = vec2u(data.width, data.height),
  //     .debug_name = name,
  //   });
  //
  // // gfx should print enough error info.
  // if (isnil(texture->image))
  //   return nullptr;
  //
  // texture->view = ImageView::create(
  //   renderer,
  //   {
  //     .image = texture->image,
  //     .format = data.format,
  //     .debug_name = name,
  //   });
  //
  // if (isnil(texture->view))
  //   return nullptr;
  //
  // texture->sampler = Sampler::create(
  //   renderer,
  //   {
  //     .filter = data.filter,
  //     .address_mode = data.address_mode,
  //     .debug_name = name,
  //   });
  //
  // if (isnil(texture->sampler))
  //   return nullptr;
  //
  // // NOTE(sushi) the below code should be temporary, just trying to get 
  // //             stuff working again after gfx reorganization.
  // texture->texture.set = DescriptorSet::create(
  //   renderer,
  //   renderer.default_sampler_set_layout,
  //   name);
  //
  // if (isnil(texture->texture.set))
  //   return nullptr;
  //
  // ImageDescriptor descriptor = 
  // {
  //   .view = texture->view,
  //   .sampler = texture->sampler,
  // };
  //
  // texture->texture.set.update(
  //   renderer,
  //   0,
  //   0,
  //   makeSlice(&descriptor, 1));
  //
  // return texture;
}

/* ----------------------------------------------------------------------------
 */
void CompiledTexture::unload(AssetMgr& assetmgr, Renderer& renderer)
{
  // image.destroy(renderer);
  // view.destroy(renderer);
  // sampler.destroy(renderer);
  // texture.set.destroy(renderer);
  //
  // if (asset.isValid())
  // {
  //   assetmgr.unloadAsset(asset.asset);
  //   asset.invalidate();
  // }
}

/* ----------------------------------------------------------------------------
 */
b8 CompiledTexture::compileFromMemory(void* pixels, CompileParams& params)
{
  using namespace fs;

  String in = params.input_path;
  String out = params.output_path;

  if (isnil(in))
    return ERROR(
      "CompiledTexture::compileFromMemory called with nil input path\n");

  if (isnil(out))
    return ERROR(
      "CompiledTexture::compileFromMemory called with nil output path\n");

  CompiledTextureData data;

  data.format = params.format;
  data.width  = params.width;
  data.height = params.height;

  assert(data.width != 0 && data.height != 0);

  data.pixels.set(&data + 1);

  u64 pixel_stride = 0;
  switch (data.format)
  {
    case ImageFormat::BW:   pixel_stride = 1; break;
    case ImageFormat::BWA:  pixel_stride = 2; break;
    case ImageFormat::RGB:  pixel_stride = 3; break;
    case ImageFormat::RGBA: pixel_stride = 4; break;
  }
  u64 pixels_size = pixel_stride * data.width * data.height;

  auto data_file = File::createForTruncatedWriting(out);
  if (isnil(data_file))
    return ERROR("failed to open file for writing compiled texture at '",
                 out, "'\n");

  data_file.write({(u8*)&data, sizeof(CompiledTextureData)});
  data_file.write({(u8*)pixels, pixels_size});

  data_file.close();

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 CompiledTexture::compileFromMemory(
    void* pixels,
    fs::File* file,
    CompileParams& params)
{
  CompiledTextureData data;

  data.format = params.format;
  data.width  = params.width;
  data.height = params.height;

  assert(data.width != 0 && data.height != 0);

  data.pixels.set(&data + 1);

  u64 pixel_stride = 0;
  switch (data.format)
  {
    case ImageFormat::BW:   pixel_stride = 1; break;
    case ImageFormat::BWA:  pixel_stride = 2; break;
    case ImageFormat::RGB:  pixel_stride = 3; break;
    case ImageFormat::RGBA: pixel_stride = 4; break;
  }
  u64 pixels_size = pixel_stride * data.width * data.height;

  file->write({(u8*)&data, sizeof(CompiledTextureData)});
  file->write({(u8*)pixels, pixels_size});

  return true;

}

}
