$ require "common"

@@lpp.import "graphics/RenderTarget.lh"
@@lpp.import "graphics/Descriptor.lh"
@@lpp.import "graphics/DescriptorSetLayout.lh"
@@lpp.import "graphics/Vulkan.lh"

#include "iro/io/IO.h"

@log.ger(gfx.rendertarget, Info)

namespace gfx
{

/* ----------------------------------------------------------------------------
 */
RenderTarget RenderTarget::create(
    Vulkan& vk, 
    const CreateParams& params)
{
  String debug_name = resolved(params.debug_name, "unnamed"_str);

  io::StaticBuffer<64> target_name;
  io::formatv(&target_name, debug_name, " render target");

  // TODO(sushi) because we set the pipeline's format to whatever the 
  //             surface's format is, we have to keep it the same here.
  //             Make pipeline formats parameterized soon.
  ImageFormat forced_format = vk.getSurfaceImageFormat();

  Image::CreateParams image_params = 
  {
    .usage = ImageUsage::ColorAttachment | ImageUsage::Sampled,
    .format = forced_format,
    // .format = params.format,
    .size = params.size,
    .debug_name = target_name.asStr(),
  };

  Image image = Image::create(vk, image_params);

  if (isnil(image))
    return nil;

  ImageView::CreateParams view_params = 
  {
    .image = image,
    .format = forced_format,
    // .format = params.format,
    .debug_name = target_name.asStr(),
  };

  ImageView view = ImageView::create(vk, view_params);

  if (isnil(view))
    return nil;

  auto set = DescriptorSet::create(
    vk,
    DescriptorSetLayout{vk.default_sampler_set_layout},
    debug_name);

  if (isnil(set))
    return nil;

  auto sampler = Sampler::create(
    vk,
    {
      .filter = ImageFilter::Nearest,
      .address_mode = ImageAddressMode::ClampToBlack,
      .debug_name = debug_name,
    });

  ImageDescriptor descriptor = 
  {
    .view = view,
    .sampler = sampler,
  };

  set.update(vk, 0, 0, makeSlice(&descriptor, 1));

  return {image, view, set, sampler};
}

/* ----------------------------------------------------------------------------
 */
void RenderTarget::destroy(Vulkan& vk)
{
  if (isnil(*this))
    return;

  image.destroy(vk);
  view.destroy(vk);
  set.destroy(vk);
  sampler.destroy(vk);
}

}
