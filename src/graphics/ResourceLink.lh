$ require "common"
$ local metadata = require "reflect.Metadata"

#include "iro/Unicode.h"

using namespace iro;

struct SourceData;

namespace gfx
{

/* ============================================================================
 */
@metadata.ref
struct ResourceLink
{
  String name = {};

  @metadata.hidden
  void* resource;

  IRO_FORCE_INLINE
  b8 isValid() const
  {
    return resource != nullptr;
  }
};

/* ============================================================================
 */
template<typename TResource>
struct TypedResourceLink : ResourceLink
{
  TResource* operator->()
  {
    assert(isValid());
    return (TResource*)resource;
  }

  const TResource* operator->() const
  {
    assert(isValid());
    return (TResource*)resource;
  }

  TResource& operator*()
  {
    assert(isValid());
    return *(TResource*)resource;
  }

  const TResource& operator*() const
  {
    assert(isValid());
    return *(TResource*)resource;
  }

  TResource& get() { assert(isValid()); return *(TResource*)resource; }
  const TResource& get() const 
    { assert(isValid()); return *(const TResource*)resource; }
};

}
