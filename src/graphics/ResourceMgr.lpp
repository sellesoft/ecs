$ require "common"

@@lpp.import "graphics/ResourceMgr.lh"
@@lpp.import "graphics/Vulkan.lh"
@@lpp.import "graphics/DescriptorSetLayout.lh"

#include "iro/Logger.h"

namespace gfx
{

@log.ger(gfx.rsrcmgr, Debug)

/* ----------------------------------------------------------------------------
 */
b8 ResourceMgr::init(Vulkan* vk)
{
  this->vk = vk;

  if (!textures.init())
    return false;

  if (!shaders.init())
    return false;

  if (!fonts.init())
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
void ResourceMgr::deinit()
{
  textures.deinit();
  shaders.deinit();
  fonts.deinit();
}

/* ----------------------------------------------------------------------------
 */
TextureResource* ResourceMgr::getOrCreateTextureResource(String name)
{
  auto* r = textures.find(name);

  if (r == nullptr)
    r = textures.create(name);

  return &r->resource;
}

/* ----------------------------------------------------------------------------
 */
ShaderResource* ResourceMgr::getOrCreateShaderResource(String name)
{
  auto* r = shaders.find(name);

  if (r == nullptr)
    r = shaders.create(name);

  return &r->resource;
}

/* ----------------------------------------------------------------------------
 */
FontResource* ResourceMgr::getOrCreateFontResource(String name)
{
  auto* r = fonts.find(name);

  if (r == nullptr)
    r = fonts.create(name);

  return &r->resource;
}

/* ----------------------------------------------------------------------------
 */
b8 ResourceMgr::loadTextureResource(TextureResource* texture)
{
  auto* r = Resource<TextureResource>::fromResource(texture);

  if (r->is_loaded)
    return true;

  const CompiledTexture& compiled = texture->compiled_texture.get();
  
  texture->image = Image::create(*vk,
  {
    .usage = ImageUsage::Sampled,
    .format = compiled.format,
    .pixels = compiled.pixels.get(),
    .size = vec2u(compiled.width, compiled.height),
    .debug_name = r->name,
  });

  if (isnil(texture->image))
    return false;

  texture->view = ImageView::create(*vk,
  {
    .image = texture->image,
    .format = compiled.format,
    .debug_name = r->name,
  });

  if (isnil(texture->view))
    return false;

  // TODO(sushi) need a way to make these parameterized again. I removed 
  //             them from CompiledTexture because I didn't think it made
  //             sense to compile that in, but realizing now we don't have 
  //             the TextureDef here. Not sure how to get at that nicely 
  //             with all this stuff being so automated....
  texture->sampler = Sampler::create(*vk,
  {
    .filter = ImageFilter::Nearest,
    .address_mode = ImageAddressMode::ClampToBlack,
    .debug_name = r->name,
  });

  if (isnil(texture->sampler))
    return false;

  texture->descriptor_set = DescriptorSet::create(
    *vk,
    DescriptorSetLayout{vk->default_sampler_set_layout},
    r->name);

  if (isnil(texture->descriptor_set))
    return false;

  ImageDescriptor descriptor = 
  {
    .view = texture->view,
    .sampler = texture->sampler,
  };

  texture->descriptor_set.update(
    *vk,
    0,
    0,
    makeSlice(&descriptor, 1));

  r->is_loaded = true;
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 ResourceMgr::loadShaderResource(ShaderResource* shader)
{
  auto* r = Resource<ShaderResource>::fromResource(shader);
  if (r->is_loaded)
    return true;

  const CompiledShader& compiled = shader->compiled_shader.get();

  shader->handle = Shader::create(*vk,
  {
    .stage = compiled.stage,
    .spv_binary = compiled.binary.getSlice(),
    .debug_name = r->name,
  });

  if (isnil(shader->handle))
    return false;

  r->is_loaded = true;
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 ResourceMgr::loadFontResource(FontResource* font)
{
  auto* r = Resource<FontResource>::fromResource(font);
  if (r->is_loaded)
    return true;

  const CompiledTexture& compiled = font->compiled_texture.get();
  
  font->image = Image::create(*vk,
  {
    .usage = ImageUsage::Sampled,
    .format = compiled.format,
    .pixels = compiled.pixels.get(),
    .size = vec2u(compiled.width, compiled.height),
    .debug_name = r->name,
  });

  if (isnil(font->image))
    return false;

  font->view = ImageView::create(*vk,
  {
    .image = font->image,
    .format = compiled.format,
    .debug_name = r->name,
  });

  if (isnil(font->view))
    return false;

  // TODO(sushi) need a way to make these parameterized again. I removed 
  //             them from CompiledTexture because I didn't think it made
  //             sense to compile that in, but realizing now we don't have 
  //             the TextureDef here. Not sure how to get at that nicely 
  //             with all this stuff being so automated....
  font->sampler = Sampler::create(*vk,
  {
    .filter = ImageFilter::Nearest,
    .address_mode = ImageAddressMode::ClampToBlack,
    .debug_name = r->name,
  });

  if (isnil(font->sampler))
    return false;

  font->descriptor_set = DescriptorSet::create(
    *vk,
    DescriptorSetLayout{vk->default_sampler_set_layout},
    r->name);

  if (isnil(font->descriptor_set))
    return false;

  ImageDescriptor descriptor = 
  {
    .view = font->view,
    .sampler = font->sampler,
  };

  font->descriptor_set.update(
    *vk,
    0,
    0,
    makeSlice(&descriptor, 1));

  r->is_loaded = true;
  return true;

}

}
