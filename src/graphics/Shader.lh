/*
 * Graphics shader representation and management
 */

$ require "common"

#include "iro/containers/Slice.h"
#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/io/format.h"

@lpp.import "graphics/ShaderParams.lh"

using namespace iro;

namespace gfx
{

struct Vulkan;

/* ============================================================================
 */
struct Shader
{
  void* handle = nullptr;

  struct CreateParams
  {
    ShaderStage stage;
    Bytes spv_binary;

    String debug_name;
  };

  static Shader create(Vulkan& vk, const CreateParams& params);
  void destroy(Vulkan& vk);

  inline bool operator==(const Shader& other) const
  {
    return handle == other.handle;
  }

  DefineNilTrait(Shader, {nullptr}, x.handle == nullptr);
};

}

namespace iro::io
{
static s64 format(WStream* io, const gfx::Shader& shader)
{
  return formatv(io, "gfx::Shader("_str, shader.handle, ')');
}
}
