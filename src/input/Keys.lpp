$ require "common"
$ local keys_h = lpp.import "input/Keys.h"
$ local astctx = require "reflect.AstContext" .fromString(keys_h)
$(keys_h)

$ local ast = require "reflect.ast"
$ ast.dumpout(astctx.translation_unit)

$ local TKey = astctx:lookupTypeDecl "Key"
$ local TMouseButton = astctx:lookupTypeDecl "MouseButton"

#include "iro/Unicode.h"

using namespace iro;

String getKeyStr(Key key)
{
  switch (key)
  {
$ for elem in TKey.elems:each() do
  case $(TKey.type.name)::$(elem.name):
    return "$(elem.name)"_str;
$ end
  }

  return nil;
}

String getMouseButtonStr(MouseButton button)
{
  switch (button)
  {
$ for elem in TMouseButton.elems:each() do
  case $(TMouseButton.type.name)::$(elem.name):
    return "$(elem.name)"_str;
$ end
  }

  return nil;
}

