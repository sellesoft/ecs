/*
 *  Testing for compiling packed data.
 */

$ local cmn = require "common"

@@lpp.import "Test.defs.lh"
@@lpp.import "reflect/RTR.lh"
@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "sdata/SourceDataFile.lh"

#include "math/Rect.h"
#include "iro/fs/File.h"

@log.ger(test-compile-data, Debug)

$ local source_data_file = "tests/compile-data/test.data"
$ local expected_typename = "Basket"
$ local output_path = "tests/compile-data/result.data"

$ local source_data_file_str = '"'..source_data_file..'"_str'
$ local output_path_str = '"'..output_path..'"_str'
$ local expected_typeid = '"'..expected_typename..'"_typeid'

b8 test()
{
  INFO("loading source data from $(source_data_file)\n");

  SourceDataFile sfile;
  if (!SourceDataFile::from(&sfile, $(source_data_file_str)))
    return ERROR("failed to load SourceDataFile\n");

  INFO("got:\n");

  rtr::prettyPrint(&fs::stdout, "SourceData"_typeid, sfile.returned_data);

  INFO("packing source data\n");

  PackedData packed;
  if (!packed.init())
    return ERROR("failed to initialize PackedData\n");

  PackParams pack_params = { &packed };
  if (!packSourceDataFromType(*sfile.returned_data, pack_params))
    return false;

  auto* packed_data = packed.getDataAs<$(expected_typename)>();

  INFO("got:\n");

  rtr::prettyPrint(&fs::stdout, $(expected_typeid), packed_data);

  CompiledData::CompileParams compile_params = 
  {
    .type = $(expected_typeid),
    .dataptr = packed_data,
    .output_path = $(output_path_str),
  };

  if (!CompiledData::compile(compile_params))
    return ERROR("failed to compile packed data\n");

  INFO("loading compiled data\n");

  CompiledData* result = CompiledData::load(compile_params.output_path);
  result->fixPointers();

  auto* compiled_data = result->getRootAs<$(expected_typename)>();

  INFO("got:\n");

  rtr::prettyPrint(&fs::stdout, $(expected_typeid), compiled_data);

  return true;
}

int main()
{
  iro::initializeDefaultLogging();

  return test()? 0 : 1;
}
