/*
 *  Testing for compiling packed data.
 */

$ local cmn = require "common"

@lpp.import "Test.defs.lh"
@lpp.import "reflect/rtr.lh"
@lpp.import "reflect/Packing.lh"
@lpp.import "reflect/CompiledData.lh"
@lpp.import "sdata/SourceDataFile.lh"
@lpp.import "game/shared/entity/Entity.defs.lh"
@lpp.import "game/shared/map/Map.defs.lh"

#include "math/Rect.h"
#include "iro/fs/File.h"

@log.import

$ local source_data_file = "assets/maps/Test.map"
$ local expected_typename = "MapDef"
$ local output_path = "tests/compile-data/result.data"

$ local source_data_file_str = '"'..source_data_file..'"_str'
$ local output_path_str = '"'..output_path..'"_str'
$ local expected_typeid = '"'..expected_typename..'"_typeid'

b8 test()
{
  @log.info(test, "loading source data from $(source_data_file)\n");

  SourceDataFile sfile;
  if (!SourceDataFile::from(&sfile, $(source_data_file_str)))
    return @log.error(test, "failed to load SourceDataFile\n");

  @log.info(test, "got:\n");

  rtr::prettyPrint(fs::stdout(), "SourceData"_typeid, sfile.returned_data);

  @log.info(test, "packing source data\n");

  reflect::PackedData packed;
  if (!packed.init())
    return @log.error(test, "failed to initialize PackedData\n");

  reflect::PackParams pack_params = { &packed };
  if (!reflect::packSourceDataFromType(*sfile.returned_data, pack_params))
    return false;

  auto* packed_data = packed.getDataAs<$(expected_typename)>();

  @log.info(test, "got:\n");

  rtr::prettyPrint($(expected_typeid), packed_data);

  reflect::CompiledData::CompileParams compile_params = 
  {
    .type = $(expected_typeid),
    .dataptr = packed_data,
    .output_path = $(output_path_str),
  };

  if (!reflect::CompiledData::compile(compile_params))
    return @log.error(test, "failed to compile packed data\n");

  @log.info(test, "loading compiled data\n");

  auto* result = reflect::CompiledData::load(
    compile_params.output_path,
    &mem::stl_allocator,
    nullptr);
  result->fixPointers();

  auto* compiled_data = result->getRootAs<$(expected_typename)>();

  @log.info(test, "got:\n");

  rtr::prettyPrint($(expected_typeid), compiled_data);

  return true;
}

int main()
{
  return test()? 0 : 1;
}
